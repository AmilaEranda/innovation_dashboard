<%include("db.jag");%>
<%include("mailconverter.jag");%>
<%

var SAMLSSOProviderConstants = Packages.org.wso2.carbon.identity.sso.saml.ui.SAMLSSOProviderConstants,
        SAMLSSOService = Packages.org.wso2.carbon.identity.sso.saml.SAMLSSOService,
        MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants,
        SAMLSSOAuthnReqDTO = Packages.org.wso2.carbon.identity.sso.saml.dto.SAMLSSOAuthnReqDTO,
        LogoutRequestSender = Packages.org.wso2.carbon.identity.sso.saml.ui.logout.LogoutRequestSender,
        req = request, assertionConsumerURL, samlResp,
        relayState = req.getParameter(String(SAMLSSOProviderConstants.RELAY_STATE)),
        username = req.getParameter(String(SAMLSSOProviderConstants.USERNAME)),
        password = req.getParameter(String(SAMLSSOProviderConstants.PASSWORD)),
        ssoTokenID = session.getId(),
        tokenCookie = req.getCookie(String(SAMLSSOProviderConstants.SSO_TOKEN_ID)),
        samlRequest = req.getParameter("SAMLRequest"),
        authMode = String(SAMLSSOProviderConstants.AuthnModes.USERNAME_PASSWORD),
        rpSessionId = req.getParameter(String(MultitenantConstants.SSO_AUTH_SESSION_ID)),
        TypesLogoutDTO = Packages.org.wso2.carbon.identity.sso.saml.stub.types.SingleLogoutRequestDTO,
        LogoutDTO = Packages.org.wso2.carbon.identity.sso.saml.dto.SingleLogoutRequestDTO,
        action = request.getParameter('action');
        log = new Log();

(function () {
    var registerUser = function (username, password) {
        var userMod = require('/modules/user.js');
        try {
            if(action == 'linkedin'){
                if(!userMod.userExists(username)){
                    userMod.register(username.trim(), password);
                }                
                loginLinkedIn();
            }else{
                if(!userMod.userExists(username)){
                    userMod.register(username.trim(), password);
                }
                userlogin();
            }
        } catch (e) {
            log.debug(e);
            session.put('error', {error: true, type: 'regError', msg: e.message});
            response.sendRedirect('login.jag');
        }
    };

    var sendResponse = function (relayState, respse, acUrl, subject) {
        assertionConsumerURL = acUrl;
        samlResp = respse;
        samlResp = respse;
        relayState = relayState;
        include('redirect.jag');
    };

    var handleSAMLRequest = function (ssoTokenID, samlRequest, relayState, authMode) {
        var ssoService = new SAMLSSOService();
        var signInRespDTO = ssoService.validateRequest(samlRequest, "", ssoTokenID, rpSessionId, authMode);
        session.put('signInRespDTO', signInRespDTO);
        session.put('relayState', relayState);

        // If it is a login request.
        if (!signInRespDTO.isLogOutReq()) {
            if (signInRespDTO.isValid() && signInRespDTO.getResponse() == null) {
                response.sendRedirect('login.jag');
            } else if (signInRespDTO.getResponse() != null) {
                sendResponse(relayState, signInRespDTO.getResponse(), signInRespDTO.getAssertionConsumerURL(), signInRespDTO.getSubject());
            }
        } else {

            // need to send signInRespDTO.getLogoutRespDTO() as the param
            // signInRespDTO.getLogoutRespDTO().length = 0 hence sending []
            // if not this method asks for a object array of org.wso2.carbon.identity.sso.saml.stub.types.SingleLogoutRequestDTO
            // but signInRespDTO.getLogoutRespDTO() gives org.wso2.carbon.identity.sso.saml.dto.SingleLogoutRequestDTO
            // So need to convert

            var logoutArr = [];
            if (signInRespDTO.getLogoutRespDTO().length > 0) {
                for (var i = 0; i < signInRespDTO.getLogoutRespDTO().length; i++) {
                    var logoutDTO = signInRespDTO.getLogoutRespDTO()[i];
                    var typesLogoutDTO = new TypesLogoutDTO();
                    typesLogoutDTO.setAssertionConsumerURL(logoutDTO.getAssertionConsumerURL());log.info("==========3"+logoutDTO.getAssertionConsumerURL());
                    typesLogoutDTO.setLogoutResponse(logoutDTO.getLogoutResponse());
                    typesLogoutDTO.setRpSessionId(logoutDTO.getRpSessionId());
                    logoutArr.push(typesLogoutDTO);

                }
            }
            LogoutRequestSender.getInstance().sendLogoutRequests(logoutArr);
            // sending LogoutResponse back to the initiator
            sendResponse(relayState, signInRespDTO.getLogoutResponse(), signInRespDTO.getAssertionConsumerURL(), signInRespDTO.getSubject());
        }
    };

    var populateAuthnReqDTO = function () {
        var authnReqDTO = new SAMLSSOAuthnReqDTO();
        var signInRespDTO = session.get('signInRespDTO');

        authnReqDTO.setAssertionConsumerURL(signInRespDTO.getAssertionConsumerURL());
        authnReqDTO.setId(signInRespDTO.getId());
        authnReqDTO.setIssuer(signInRespDTO.getIssuer());
        authnReqDTO.setUsername(username);
        authnReqDTO.setPassword(password);
        authnReqDTO.setSubject(signInRespDTO.getSubject());
        authnReqDTO.setRpSessionId(signInRespDTO.getRpSessionId());
        authnReqDTO.setRequestMessageString(signInRespDTO.getRequestMessageString());

        return authnReqDTO;
    };

    var handleAuthentication = function () {
        var ssoService = new SAMLSSOService();
        var authRespDTO = ssoService.authenticate(populateAuthnReqDTO(), ssoTokenID);
        if (authRespDTO.isSessionEstablished()) { // authenticated
            sendResponse(relayState, authRespDTO.getRespString(), authRespDTO.getAssertionConsumerURL(), authRespDTO.getSubject());
        } else {
            session.put('error', {error: true, type: 'loginError', msg: 'Authentication Failure, invalid username or password'});
            response.sendRedirect('login.jag');
        }
    };

    var userlogin = function(){
        if (action == 'register') {
            session.put('error', {error: true, type: 'loginError', msg: 'Please verify your email address.'});
            response.sendRedirect('login.jag');
        } else {
            var person=db.query("SELECT * FROM login_details WHERE password=SHA1('"+password+"') AND email='"+username+"'");
            if(person.length>0){
                var record_status=db.query("SELECT record_status FROM person WHERE person_id='"+person[0].person_id+"'");
                if((record_status[0].record_status=="1"|record_status[0].record_status=="3")&&username==person[0].email){
                    var userMod = require('/modules/user.js');
                    if(!userMod.userExists(makeForUES(username))){
                        userMod.register(makeForUES(username), "password");
                    }
                    var login_details=db.query("SELECT * FROM login_details WHERE email='"+username+"'");
                    db.query("INSERT INTO user_log(type,login_details_id,date_time) VALUES('"+login_details[0].access_group_id+"','"+login_details[0].login_details_id+"',CURRENT_TIMESTAMP)");
                    username=makeForUES(username);password="password";
                    handleAuthentication();
                }else if(record_status[0].record_status=="0"){
                    session.put('error', {error: true, type: 'loginError', msg: 'Authentication Failure, Please verify your email'});
                    response.sendRedirect('login.jag');
                }else if(record_status[0].record_status=="2"){
                    session.put('error', {error: true, type: 'loginError', msg: 'Authentication Failure, Your account has been deactivated'});
                    response.sendRedirect('login.jag');
                }else if(record_status[0].record_status=="4"|record_status[0].record_status=="5"){
                    session.put('error', {error: true, type: 'loginError', msg: 'Please login with your linkedin profile.'});
                    response.sendRedirect('login.jag');
                }else{
                    session.put('error', {error: true, type: 'loginError', msg: 'Authentication Failure, invalid username or password'});
                    response.sendRedirect('login.jag');
                }
            }else{
                var personli=db.query("SELECT * FROM person WHERE email='"+username+"'");
                if(personli.length>0&&(personli[0].record_status=="4"|personli[0].record_status=="5")){
                    session.put('error', {error: true, type: 'loginError', msg: 'Please login with your LinkedIn profile'});
                    response.sendRedirect('login.jag');
                }else{
                    session.put('error', {error: true, type: 'loginError', msg: 'Authentication Failure, invalid username or password'});
                    response.sendRedirect('login.jag');
                }                
            }
        }
    }

    var sendconfirmemail = function(to,value,name){
        try{
            var content = "Hello "+name+",\nWelcome to the Innovation Dashboard of Sri Lanka which is Leading Innovation and research portal in Sri Lanka.\nTo activate your profile click on following link or copy and paste it.\n\n https://localhost:9443/userforms/confirm.jag?id="+value+"\n\nThis is a automatic e-mail generated by the Innovation Dashboard and don't reply for this e-mail.\n\nFor more information contact us on info@costi.gov.lk.com\n\nThank you.";
            var subject = "Confirm E-mail";
            var email = require('email');
            var sender = new email.Sender("smtp.gmail.com", "587", "costi.gov.lk@gmail.com", "costi@sl123", "tls");
            sender.from="costi.gov.lk@gmail.com";
            sender.to = to;
            sender.subject = subject;
            sender.text = content;
            sender.html = "<img src=\"http://t1.gstatic.com/images?q=tbn:ANd9GcR45M_IYAxlhCMlE0UftseP-7XgjqLNzAutHjls3fbkwHWiKr49Cg\">";
            sender.send();
            return true;
        }catch(e){
            return "Error while sending confirmation e-mail.Please contact support team to verify your profile.";
        }
    }

    var canuseradd = function(){
        var person=db.query("SELECT person.record_status FROM person WHERE person.email='"+username+"'");
        if(person.length>0){
            return person[0].record_status;
        }else{
            return 9999;
        }
    }

    var  loginLinkedIn = function(){
        var personlinkedin=db.query("SELECT * FROM login_details WHERE password=SHA1('"+password+"') AND email='"+username+"'");
        if(personlinkedin.length>0){
            var login_details=db.query("SELECT * FROM login_details WHERE email='"+username+"'");
            db.query("INSERT INTO user_log(type,login_details_id,date_time) VALUES('"+login_details[0].access_group_id+"','"+login_details[0].login_details_id+"',CURRENT_TIMESTAMP)");
            var userMod = require('/modules/user.js');
            if(!userMod.userExists(makeForUES(username))){
                userMod.register(makeForUES(username), "password");
            }
            username=makeForUES(username);password="password";
            handleAuthentication();
        }else{
            session.put('error', {error: true, type: 'loginError', msg: 'Authentication Failure, invalid username or password1'});
            response.sendRedirect('login.jag');
        }
        
    };

    var handleLinkedIn = function(){
        var canuseraddval=canuseradd();
        if(canuseraddval=="9999"){
            var firstname=request.getParameter("firstname");
            var lastname=request.getParameter("lastname");
            var password=request.getParameter("password");

            db.query("INSERT INTO person(title_id,first_name,last_name,email,full_name,record_status,country_id,type,nationalty) VALUES('1','"+firstname+"','"+lastname+"','"+username+"','"+firstname+" "+lastname+"','4','129','RES','SRI')");

            var person_id=db.query("SELECT person_id FROM person WHERE email='"+username+"'")[0].person_id;
            var logindetails=db.query("SELECT * FROM login_details WHERE email='"+username+"'");
            if(logindetails.length>0){
                db.query("UPDATE login_details SET password=SHA1('"+password+"'),verification_code='' WHERE email='"+username+"'");
            }else{
                db.query("INSERT INTO login_details(email,password,person_id,access_group_id) VALUES('"+username+"',SHA1('"+password+"'),'"+person_id+"','2')");
            }
            

            registerUser(makeForUES(username), "password");

        }else if(canuseraddval=="0"){
            //Change state to 4
            var password=request.getParameter("password");

            db.query("UPDATE person SET record_status='4' WHERE email='"+username+"';");

            var person_id=db.query("SELECT person_id FROM person WHERE email='"+username+"'")[0].person_id;

            var logindetails=db.query("SELECT * FROM login_details WHERE email='"+username+"'");
            if(logindetails.length>0){
                db.query("UPDATE login_details SET password=SHA1('"+password+"'),verification_code='' WHERE email='"+username+"'");
            }else{
                db.query("INSERT INTO login_details(email,password,person_id,access_group_id) VALUES('"+username+"',SHA1('"+password+"'),'"+person_id+"','2')");
            }

            registerUser(makeForUES(username), "password");

        }else if(canuseraddval=="1"){
            //Change state to 4
            db.query("UPDATE person SET record_status='4' WHERE email='"+username+"';");
            var password=request.getParameter("password");
            var person_id=db.query("SELECT person.person_id FROM person WHERE person.email='"+username+"'")[0].person_id;
            db.query("UPDATE login_details SET password=SHA1('"+password+"'),verification_code='' WHERE email='"+username+"' ");
            loginLinkedIn();
        }else if(canuseraddval=="2"){
            session.put('error', {error: true, type: 'loginError', msg: 'Your account has been block with this e-mail.Please contact support team.'});
            response.sendRedirect('login.jag');
        }else if(canuseraddval=="3"){
            //Change state to 5
            db.query("UPDATE person SET record_status='5' WHERE email='"+username+"';");
            var password=request.getParameter("password");
            var person_id=db.query("SELECT person.person_id FROM person WHERE person.email='"+username+"'")[0].person_id;
            db.query("UPDATE login_details SET password=SHA1('"+password+"'),verification_code='' WHERE email='"+username+"' ");
            loginLinkedIn();
        }else if(canuseraddval=="4"){
            loginLinkedIn();
        }else if(canuseraddval=="5"){
            loginLinkedIn();
        }else if(canuseradd=="-1"){
            //login as linked in request
            session.put('error', {error: true, type: 'regError', msg: 'An account with this e-mail already exist in the system.It is inactive.Please contact support team.'});
            response.sendRedirect('login.jag');
        }else{
            session.put('error', {error: true, type: 'loginError', msg: 'Unknown user type for system.Please contact support team.'});
            response.sendRedirect('login.jag');
        }
    };

    var handleavailableusers=function (canuseradd){
        if(canuseradd=="0"){
            var userMod = require('/modules/user.js');
            if(userMod.userExists(makeForUES(username))){
                session.put('error', {error: true, type: 'regError', msg: 'Please verify your E-mail.'});
                response.sendRedirect('login.jag');
            }else{
                var password=request.getParameter("password");
                var person_id=db.query("SELECT person.person_id FROM person WHERE person.email='"+username+"'")[0].person_id;                        
                //save random number and send email again.
                var random=makeid();

                var logindetails=db.query("SELECT * FROM login_details WHERE email='"+username+"'");
                if(logindetails.length>0){
                    db.query("UPDATE login_details SET password=SHA1('"+password+"'),verification_code='"+random+"' WHERE email='"+username+"'");
                }else{
                    db.query("INSERT INTO login_details(email,password,verification_code,person_id,access_group_id) VALUES('"+username+"',SHA1('"+password+"'),'"+random+"','"+person_id+"','2')");
                }                

                if(!userMod.userExists(makeForUES(username))){
                	userMod.register(makeForUES(username), "password");
                }


                //sendconfirmemail(username,random,request.getParameter("firstname"));
                session.put('error', {error: true, type: 'regError', msg: 'Your data already available in the system.We\'ll send a verify e-mail to you.Please verify your E-mail and login with previous password you entered.'});
                response.sendRedirect('login.jag');
            }            
        } else if(canuseradd=="1"){
            session.put('error', {error: true, type: 'regError', msg: 'An account with this e-mail already exist in the system.'});
            response.sendRedirect('login.jag');
        } else if(canuseradd=="2"){
            session.put('error', {error: true, type: 'regError', msg: 'Your account has been block with this e-mail.Please contact support team.'});
            response.sendRedirect('login.jag');
        } else if(canuseradd=="3"){
            session.put('error', {error: true, type: 'regError', msg: 'Your account related to this e-mail was deactivated.Please login using the same e-mail to activate the account.'});
            response.sendRedirect('login.jag');
        }else if(canuseradd=="4"|canuseradd=="5"){
            //login as linked in request
            session.put('error', {error: true, type: 'regError', msg: 'An account with this e-mail already exist in the system.Please login using your LinkedIn profile.'});
            response.sendRedirect('login.jag');
        }else if(canuseradd=="-1"){
            //login as linked in request
            session.put('error', {error: true, type: 'regError', msg: 'An account with this e-mail already exist in the system.It is inactive.Please contact support team.'});
            response.sendRedirect('login.jag');
        }else{
            session.put('error', {error: true, type: 'loginError', msg: 'Unknown user type for system.Please contact support team.'});
            response.sendRedirect('login.jag');
        }
    }

    var addUser=function(){
        var returnValue="true";
        var title=request.getParameter("title");
        var gender=request.getParameter("gender");
        var firstname=request.getParameter("firstname");
        var lastname=request.getParameter("lastname");
        var initials=request.getParameter("initials");
        var email=username;

        var researchertype=request.getParameter("researchertype");
        var organization=request.getParameter("organization");
        var organizationName=request.getParameter("organizationName");
        var organization_type;

        var mainresarea=request.getParameter("mainresarea");
        var subresarea=request.getParameter("subresarea");
        var subsubresarea=request.getParameter("subsubresarea");
                
        var password=request.getParameter("password");

        var full_name;
        if(firstname==null|firstname==""){
            full_name=initials+" "+lastname;                
        }else{
            full_name=firstname+" "+lastname;
        }

        db.query("INSERT INTO person(title_id,gender,first_name,last_name,initials,email,full_name,record_status,country_id,type,nationalty) "+ "VALUES('" + title + "','" + gender + "','" + firstname + "','" + lastname + "','" + initials + "',"+ "'" + email+ "','" + full_name + "','" + "1" + "','" + "129" + "','" + "RES" + "','" + "SRI" + "')");
        var person_id=db.query("SELECT person_id FROM person WHERE email='"+email+"'")[0].person_id;
        var random=makeid();
        db.query("INSERT INTO login_details(email,password,verification_code,person_id,access_group_id) VALUES('"+email+"',SHA1('"+password+"'),'"+random+"','"+person_id+"','2')");
        db.query("INSERT INTO person_area_of_interest(person_person_id,area_of_interest_id,sub_area_of_interest_id,sub_sub_area_of_interest_id) VALUES('"+person_id+"','"+mainresarea+"','"+subresarea+"','"+subsubresarea+"')");
        if(organization=="-1"){
            organization_type=(researchertype==1)?"UNI":"INS";
            db.query("INSERT INTO organization(name,type,record_status,country_id) VALUES('"+organizationName+"','"+organization_type+"','1','129')");
            organization=db.query("SELECT organization_id FROM organization WHERE organization_id=(SELECT MAX(organization_id) FROM organization)")[0].organization_id;
        }
        if(researchertype!="3"){
            db.query("INSERT INTO person_organization(person_id,organization_id,his_default,record_status) VALUES('"+person_id+"','"+organization+"','1','1')");
        }
        //returnValue=sendconfirmemail(username,random,firstname);
        return returnValue;
    }

    var makeid=function(){
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        for(var i=0;i<10;i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        return text;
    }

    if (tokenCookie != null) {
        ssoTokenID = tokenCookie.getValue();
    }

    if (username == null && password == null) {
        if (relayState == null) {
            log.warn("RelayState is not present in the request.");
        }
        if (samlRequest != null) { // this is a login request
            handleSAMLRequest(ssoTokenID, samlRequest, relayState, authMode);
        } else { // Non-SAML request are assumed to be logout requests
            //handleLogout(req, resp);
        }
    } else {
        if (relayState == null) {
            relayState = session.get('relayState');
        }

        if (action == 'register') {
            var canuseraddval=canuseradd();
            if(canuseraddval==9999){
                //Add user
                var adduser=addUser();
                if(adduser+""=="true"){
                    username=makeForUES(username);
                    registerUser(username, "password");
                }else{
                    session.put('error', {error: true, type: 'regError', msg: adduser});
                    response.sendRedirect('login.jag');
                }
            }else{
                handleavailableusers(canuseraddval);
            }
        } else if(action == 'linkedin'){
            handleLinkedIn();
        } else {
            userlogin();
        }
    }

}());

%>